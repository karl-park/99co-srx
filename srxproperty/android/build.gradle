// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    ext {
        kotlinVersion = "1.4.10" // Or any other kotlin version following 1.3.x
        RNNKotlinVersion = kotlinVersion
        RNNKotlinStdlib = "kotlin-stdlib-jdk8"
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.3'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

def googlePlayServicesVersion = '16.0.1'

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }
        maven { url 'https://maven.google.com' }
        maven { url 'https://jitpack.io' }
        configurations.all {
            resolutionStrategy {
                // react-native-firebase
                force "com.google.android.gms:play-services-stats:$googlePlayServicesVersion"
                force "com.google.android.gms:play-services-base:$googlePlayServicesVersion"

                force "com.google.android.gms:play-services-gcm:16.1.0"
                force "com.google.android.gms:play-services-base:16.1.0"
            }
        }
    }
}

subprojects { subproject ->
    afterEvaluate {
        if ((subproject.plugins.hasPlugin('android') || subproject.plugins.hasPlugin('android-library'))) {
            android {
                variantFilter { variant ->
                    def names = variant.flavors*.name
                    // To check for a certain build type, use variant.buildType.name == "<buildType>"
                    if (names.contains("reactNative51") || names.contains("reactNative56") ||
                            names.contains("reactNative57") || names.contains("reactNative55")) {
                        // Gradle ignores any variants that satisfy the conditions above.
                        setIgnore(true)
                    }
                }
            }
        }
    }
    project.configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.android.support'
                    && !details.requested.name.contains('multidex')) {
                details.useVersion "26.1.0"
            }
        }
    }
}

ext {
    buildToolsVersion = "29.0.3"
    minSdkVersion = 21 //Android 5.0
    compileSdkVersion = 29 //Android 10.0
    targetSdkVersion = 29  //Android 10.0
    supportLibVersion = "26.1.0"
    googlePlayServicesVersion = googlePlayServicesVersion
    androidMapsUtilsVersion = "0.5+"
}
